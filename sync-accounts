#!/usr/bin/env ruby
require 'uri'
require 'yaml'
require 'net/http'
require 'net/https'
require 'fileutils'

$key_cache = {}
def github_keys(user)
  return $key_cache[user] if $key_cache[user]

  http = Net::HTTP.new('github.com', 443)
  http.use_ssl = true
  
  response = http.request(Net::HTTP::Get.new("/#{user}.keys"))
  raise 'failure' unless response.is_a?(Net::HTTPOK)
  $key_cache[user] = response.body.split("\n")
end

def read_permissions_from_url(url)
  url = URI.parse(url)
  http = Net::HTTP.new(url.host, url.port)
  http.use_ssl = url.scheme == 'https'
  
  response = http.request(Net::HTTP::Get.new(url.path))
  YAML.load(response.body)
end

def read_permissions(config_file_or_url)
  permissions = { 'apps' => {}, 'users' => {} }

  yaml = if File.exist?(config_file_or_url)
    configs = YAML.load(File.read(config_file_or_url))
    configs['url'] ? read_permissions_from_url(configs['url']) : configs
  elsif config_file_or_url =~ URI::regexp
    read_permissions_from_url(config_file_or_url)
  else
    puts "Invalid permissions url or config file #{config_file_or_url}"
    exit(false)
  end
  
  # Add keys to users and apps
  if yaml['users']
    yaml['users'].each do |user|
      permissions['users'][user] = github_keys(user)
    end
  end

  if yaml['apps']
    yaml['apps'].each do |app, users|
      permissions['apps'][app] = users.map{|u| github_keys(u) }.flatten
    end
  end
  
  permissions
end

def shells
  return $shells if defined?($shells)
  $shells = File.read('/etc/shells').lines.map{|l|l.strip}.select { |l| !l.empty? && !l.start_with?('#') }
  $shells
end

def system_users
  users = `cat /etc/passwd | grep -v root`.split("\n").map do |u|
    u =~ /([^\s]+):.*:.*:.*:.*:([^\s]+):([^:]+)$/
    {name: $1, home: $2, shell: $3}
  end
  users = users.select{|u| u[:home] && u[:name] && shells.include?(u[:shell]) }
  users.select{|u| u[:home].index('/home') == 0 }
end

def system_apps
  users = `cat /etc/passwd | grep -v root`.split("\n").map do |u|
    u =~ /([^\s]+):.*:.*:.*:.*:([^\s]+):([^:]+)$/
    {name: $1, home: $2, shell: $3}
  end
  users = users.select{|u| u[:home] && u[:name] && shells.include?(u[:shell]) }
  users.select{|u| u[:home].index('/srv') == 0 }
end

def add_system_user(name)
  raise "invalid user name '#{name}'" unless name =~ /^[a-z][-a-z0-9]*$/
  
  `/usr/sbin/useradd --create-home #{name}`
  `/usr/sbin/usermod -a -G wheel #{name}`
end

def remove_system_user(name)
  `/usr/bin/userdel --remove #{name}`
end

def write_authorized_keys(user, homedir, keys)
  ssh_dir = File.join(homedir, '.ssh')
  FileUtils.mkdir_p(ssh_dir)
  FileUtils.chown_R(user, user, ssh_dir)
  FileUtils.chmod(0700, ssh_dir)

  filename = File.join(ssh_dir, 'authorized_keys')
  open(filename, 'w') do |file|
    keys.each {|k| file.puts(k) }
  end
  FileUtils.chown(user, user, filename)
  FileUtils.chmod(0600, filename)
end

permissions = read_permissions(ARGV[0] || '/etc/sync-accounts.conf')

# Create missing users
system_usernames = system_users.map{|su| su[:name]}
permissions['users'].keys.each do |user|
  user = user.gsub(/^[0-9]*/, '')
  next if system_usernames.include?(user)
  puts "adding user #{user}"
  add_system_user(user)
end

# Removed old users
system_usernames.each do |user|
  next if permissions['users'].keys.map{|n| n.gsub(/^[0-9]*/, '')}.include?(user)
  puts "removing user #{user}"
  remove_system_user(user)
end

# Write user ssh keys
system_users.each do |su|
  key = permissions['users'].keys.find {|key| key.gsub(/^[0-9]*/, '') == su[:name]}
  puts "writing authorized_keys for #{su[:name]}"
  write_authorized_keys(su[:name], su[:home], permissions['users'][key])
end

# Write app ssh keys
system_apps.each do |su|
  next if !permissions['apps'][su[:name]]
  puts "writing authorized_keys for #{su[:name]}"
  write_authorized_keys(su[:name], su[:home], permissions['apps'][su[:name]])
end
